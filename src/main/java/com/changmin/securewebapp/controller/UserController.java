package com.changmin.securewebapp.controller;import com.changmin.securewebapp.dto.LoginRequestDto;import com.changmin.securewebapp.dto.LoginResponseDto;import com.changmin.securewebapp.dto.UserInfoResponseDto;import com.changmin.securewebapp.dto.UserRequestDto;import com.changmin.securewebapp.entity.User;import com.changmin.securewebapp.repository.UserRepository;import com.changmin.securewebapp.service.LogoutService;import com.changmin.securewebapp.service.UserService;import jakarta.servlet.http.HttpServletRequest;import lombok.RequiredArgsConstructor;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;@RestController@RequestMapping("/api/users")@RequiredArgsConstructorpublic class UserController {	private final UserService userService;	private final LogoutService logoutService;	private final UserRepository userRepository;	@PostMapping("/signup")	public ResponseEntity<String> register(@RequestBody UserRequestDto dto) {		userService.register(dto);		return new ResponseEntity<>("회원가입 성공!", HttpStatus.CREATED);	}	@PostMapping("/login")	public ResponseEntity<LoginResponseDto> login(@RequestBody LoginRequestDto dto) {		String token = userService.login(dto.getUsername(), dto.getPassword());		return ResponseEntity.ok(new LoginResponseDto(token));	}	@PostMapping("/logout")	public ResponseEntity<String> logout(HttpServletRequest request) {		String authHeader = request.getHeader("Authorization");		if(authHeader == null || !authHeader.startsWith("Bearer ")){			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("토큰이 없습니다.");		}		String token = authHeader.substring(7);		logoutService.logout(token);		return ResponseEntity.ok("로그아웃 되었습니다.");	}	@GetMapping("/userinfo")	public ResponseEntity<UserInfoResponseDto> getUserInfo() {		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();		String username = (String) authentication.getPrincipal();		User user = userRepository.findByUsername(username)				.orElseThrow(() -> new RuntimeException("사용자를 찾을 수 없습니다."));		UserInfoResponseDto response = new UserInfoResponseDto(user.getUsername(), user.getRole());		return ResponseEntity.ok(response);	}}